#!/usr/local/bin/perl
# purge-binaries, v1.0f
#
#-------------------------------------------------------------------------------
# Introduction
#   purge-binaries scans news postings, purging those it determines to be
#   binary files.  It is designed to work as a channel with inn, although
#   it should be possible to feed it output from "ls -l" too.  Results are
#   logged.
#
#   To run, you will need Perl 4.0 or better as well as the ctime.pl 
#   routine that emulates ctime(3C).
#
#   purge-binaries is written by George A. Theall, theall@tifaware.com.
#   You may freely use and redistribute this.  I can not offer any
#   support for this but am interested in your comments, suggestions,
#   and problem reports.
#
#   The latest version is available through
#      http://www.tifaware.com/perl/purge-binaries/
#
#-------------------------------------------------------------------------------
# Operation
#   By design, purge-binaries operates as a channel with inn, checking each
#   article as it arrives and deleting binaries.  To use, add an entry like 
#   the following to your newsfeeds file:
#
#      purge-binaries:*:Tc,WbO:/usr/local/news/bin/purge-binaries
#
#   which will process articles in every newsgroup.  If you'd prefer, you
#   can modify this entry to restrict attention to certain hierarchies
#   and/or newsgroups.  See newsfeeds(5).
#
#   Note that this channel is fed overview data so crossposted articles will
#   be handled properly.
#
#   You may want to adjust some of the parameters below to improve
#   performance or whatnot. One word of warning though - lowering the
#   percentage of encoding will increase the risk of falsely identifying
#   a post as a binary.
#
#-------------------------------------------------------------------------------
# History
#   02-May-95, GAT, v1.0a
#      - Initial version.
#
#   10-May-95, GAT, v1.0b
#      - Tweaked isbinary() to better handle MIME-encoded files.
#
#   15-May-95, GAT, v1.0c
#      - Now scans messages with "FAQ" or "Frequently Asked Questions" in 
#        the subject line.
#
#   12-Jun-95, GAT, v1.0d
#      - Tweaked isbinary() to better handle MIME-encoded files again.
#
#   25-Jan-96, GAT, v1.0e
#      - Tweaked isbinary() so that identifying MIME attachments using
#        a header line is case-insensitive.
#
#   07-Feb-96, GAT, v1.0f
#      - Tweaked isbinary() to identify other types of binaries such as
#        audio and video files.
#
#-------------------------------------------------------------------------------


require "ctime.pl";			# needed for ctime()


# Define initial values for selected variables.
$DEBUG = 0;				# if set, do *NOT* unlink
$encodedpct = 50;			# % lines encoded as cutoff
$logfile = "/usr/adm/news/binary.log";	# file for logging
$minsize = 5000;			# ignore files smaller than this
$maxlines = 1000;			# number of lines to test
$totbytes = $totfiles = 0;		# number of bytes and files deleted


# Open log file, turn off buffering, and print start time.
open(LOG, ">> $logfile") || die "*** unable to open logfile: $! ***";
select((select(LOG), $|=1)[$[]);
print LOG "-" x 78 . "\n";
print LOG "$0 started " . &ctime(time);


# For each post.
while (<STDIN>) {
	# Ignore "small" posts.
	$_ =~ s/^(\d+) //;
	$bytes = $1;
	next unless ($bytes >= $minsize);


	# Test one of the articles and delete the post as necessary.
	chop;
	@files = split(' ', (split('\t', $_))[0]);
	if ( ($why = &isBinary($files[0])) ne "" ) {
		print LOG "$files[0]; $bytes bytes; $why\n";
		foreach (@files) {
			print LOG "\t$_ purged\n";
			$DEBUG || unlink "$_" || warn "failed to unlink $_ - $!";
			++$totfiles;
		}
		$totbytes += $bytes;
	}
}


# Print final status.
print LOG "$0 ended " . &ctime(time) ;
print LOG "$totfiles files ($totbytes bytes) purged\n";


# Close log and exit.
close(LOG);
exit(0);


####################################################
#  isBinary - determines if a file is a binary.    #
#                                                  #
#  Notes:                                          #
#      - Posts in a *.answers newsgroup are        #
#        ignored.                                  #
#      - Some messages are incorrectly identified  #
#        as binaries because of bad MIME headers.  #
#                                                  #
#  Entry:                                          #
#        file = filename                           #
#  Exit:                                           #
#        string indicating reason to delete post.  #
####################################################
sub isBinary {
	local($file) = @_;
	local($lines, $mimelines, $uulines) = (0,0,0);
	local($reason) = "";


	# Scan through the article for questionable signs
	open(ARTICLE, "$file") || die "*** unable to open $file: $! ***";
	while (<ARTICLE>) {
		++$lines;

		last if ($lines > $maxlines);
		last if ($_ =~ /^Newsgroups:\s+.*\.answers/);

		# NB: ignore case when checking for a match!
		if ($_ =~ /^Content-Type:\s+(application|audio|image|video)/i) {
			$reason = "binary|MIME";
			last;
		}
		elsif ($_ =~ /^(\s|>|;)*M.{60,61}\s*$/) {
			++$uulines;
		}
		elsif ($_ =~ /^[^M~]\S{59,63}\s*$/) {
			++$mimelines;
		}
	}
	close(ARTICLE);
	$DEBUG && warn "   $lines lines; $uulines uuencoded; $mimelines mime encoded\n";
	if (100*$uulines/$lines > $encodedpct) {
		$reason = "uuencoded ($uulines/$lines)";
	}
	elsif (100*$mimelines/$lines > $encodedpct) {
		$reason = "mime encoded ($mimelines/$lines)";
	}
	return $reason;
}
